---
title: "Taller 1"
---

## Introducción

En RStudio podemos tener varias ventanas que nos permiten tener más control de nuestro "ambiente", el historial, los "scripts" o códigos que escribimos y por supuesto, tenemos nuestra consola, que también tiene el símbolo "\>" con R. Podemos pedir operaciones básicas

```{r 2}
2+5
5*3

#Para escribir comentarios y que no los lea como operaciones ponemos el símbolo de gato
# Lo podemos hacer para un comentario en una línea o la par de una instrucción
1:5               # Secuencia 1-5

seq(1, 10, 0.5)   # Secuencia con incrementos diferentes a 1

c('a','b','c')  # Vector con caracteres
1:7             # Entero
40<80           # Valor logico
2+2 == 5        # Valor logico
T == TRUE       # T expresion corta de verdadero

```

R es un lenguaje de programación por objetos. Por lo cual vamos a tener objetos a los que se les asigna su contenido. Si usamos una flechita "\<-" o "-\>" le estamos asignando algo al objeto que apunta la felcha.

```{r}
x <- 24         # Asignacion de valor 24 a la variable x para su uso posterior (OBJETO)
x/2             # Uso posterior de variable u objeto x
x               # Imprime en pantalla el valor de la variable u objeto
x <- TRUE       # Asigna el valor logico TRUE a la variable x OJO: x toma el ultimo valor que se le asigna
x
```

## Vectores

Los vectores son uno de los objetos más usados en R.

```{r}
y <- c(2,4,6)     # Vector numerico
y <- c('Primaria', 'Secundaria') # Vector caracteres
```

Dado que poseen elementos, podemos también observar y hacer operaciones con sus elementos, usando "\[ \]" para acceder a ellos

```{r}
y[2]              # Acceder al segundo valor del vector y
y[3] <- 'Preparatoria y más' # Asigna valor a la tercera componente del vector
sex <-1:2         # Asigna a la variable sex los valores 1 y 2
names(sex) <- c("Femenino", "Masculino") # Asigna nombres al vector de elementos sexo
sex[2]            # Segundo elemento del vector sex

```

## Funciones

Algunas funciones básicas son las siguientes. Vamos a ir viendo más funciones, pero para entender cómo funcionan, haremos unos ejemplos y cómo pedir ayuda sobre ellas.

```{r 6}
sum (10,20,30)    # Función suma
rep('R', times=3) # Repite la letra R el numero de veces que se indica
sqrt(9)           # Raiz cuadrada de 9

```

## Ayuda

Pedir ayuda es indispensable para aprender a escribir nuestros códigos. A prueba y error, es el mejor sistema para aprender. Podemos usar la función help, example y ?

```{r 7}
help(sum)         # Ayuda sobre función sum
example(sum)      # Ejemplo de función sum
```

## Mi ambiente

Todos los objetos que hemos declarado hasta ahora son parte de nuestro "ambiente" (environment). Para saber qué está en nuestro ambiente usamos el comando

```{r 8}
ls()
gc()           # Garbage collection, reporta memoria en uso
```

Para borrar todos nuestros objetos, usamos el siguiente comando, que equivale a usar la escobita de la venta de environment

```{r 9}
rm(list=ls())  # Borrar objetos actuales
```

## Directorio de trabajo

Es muy útil saber dónde estamos trabajando y donde queremos trabajar. Por eso podemos utilizar los siguientes comandos para saberlo

Ojo, checa, si estás desdes una PC, cómo cambian las "" por"/" o por "\\"

```{r 10}
getwd()           # Directorio actual
#setwd("C:/Users/anaes/Dropbox/2021/CursoR-posgrado")# Cambio de directorio

list.files()      # Lista de archivos en ese directorio
```

## Paquetes

Los paquetes los podemos instalar ya sea en el menú de paquetes en la ventana del lado derecho inferior (si tienes la configuración original) o podemos hacerlo por comandos.

![Paso1](ima/paquete1.png)

![Paso2](ima/paquete2.png)

![Paso3](ima/paquete3.png)

Y se verá algo así en la consola

![Paso4](ima/paquete4.png)

Esto es igual que instalemos los paquetes con comandos:

    install.packages("janitor", dependencies = TRUE)

Después de instalados los paquetes o los palomeamos o los cargamos con un comando

```{r}
library(janitor)
```

Esto ya nos permite utilizarlos, es decir las funciones o comandos que vienen en ellos, ya pueden ser utilizados. Cargar los paquetes es una operación que se tiene que hacer en cada sesión (cuando abrimos) el programa R o RStudio. La instalación sólo se hace una vez.

## Paquete `{pacman}`

En general, cuando hacemos nuestro código querremos verificar que nuestras librerías estén instaladas. Si actualizamos nuestro R y Rstudio es probable que hayamos perdido alguno.

Este es un ejemplo de un código. Y vamos a introducir un paquete muy útil llamado `{pacman}`

```{r}
if (!require("pacman")) install.packages("pacman") # instala pacman si se requiere
pacman::p_load(tidyverse, readxl, writexl, haven, sjlabelled, pollster) #carga los paquetes listados

```

Hay muchos formatos de almacenamiento de bases de datos. Vamos a aprender a importar información desde ellos.

## Datos para el curso

Estos los puedes descargar desde el repo de la clase que hizo la profe <https://github.com/FCPyS/eacsii2023/tree/main/datos>

### Desde Excel

El paquete más compatible con RStudio es readxl. A veces, otros paquetes tienen más problemas de configuración entre R y el Java.

```{r 3}
ICE_2022 <- readxl::read_excel("datos/ICE_2022.xlsx", sheet = "para_importar")

```

Como el nombre de paquete lo indica, sólo lee. Para escribir en este formato, recomiendo el paquete "writexl". Lo instalamos anteriormente.

Si quisiéramos exportar un objeto a Excel

```{r 5}
writexl::write_xlsx(ICE_2022, path = "mi_exportacion.xlsx")
```

### Desde STATA y SPSS

Si bien también se puede realizar desde el paquete foreign. Pero este no importa algunas características como las etiquetas y tampoco funciona con las versiones más nuevas de STATA. Vamos a instalar otro paquete, compatible con el mundo tidyverse.

Recuerda que no hay que instalarlo (viene adentro de tidyverse). Se instalasólo la primera vez. Una vez instalado un paquete, lo llamamos con el comando "library"

```{r}
enoet322socdem_tiempo <- haven::read_dta("datos/enoet322socdem_tiempo.dta")

```

!Importante, a R no le gustan los objetos con nombres que empiezan en números

El paquete haven sí exporta información.

```{r}
haven::write_dta(enoet322socdem_tiempo, "datos/mi_exportacion.dta", version = 12)
```

Con SSPS es muy parecido. Dentro de "haven" hay una función específica para ello.

Checa que en todas las exportaciones en los nombres hay que incluir **la extensión del programa**. Si quieres guardar en un lugar diferente al directorio del trabajo, hay que escribir toda la ruta dentro de la computadora.

## Revisión de nuestra base

Vamos a revisar la base, brevemente la base

```{r}
class(enoet322socdem_tiempo) # tipo de objeto
names(enoet322socdem_tiempo) # lista las variables
head(enoet322socdem_tiempo) # muestra las primeras 6 líneas
table(enoet322socdem_tiempo$sex) # un tabulado simple
```

## Revisión con dplyr

Operador de "pipe" o "tubería" %\>% (Ctrl+Shift+M) Antes de continuar, presentemos el operador "pipe" %\>%. dplyr importa este operador de otro paquete (magrittr). Este operador le permite canalizar la salida de una función a la entrada de otra función. En lugar de funciones de anidamiento (lectura desde adentro hacia afuera), la idea de la tubería es leer las funciones de izquierda a derecha.

```{r}
enoet322socdem_tiempo |> # este esl pipe nativo, funciona igual 
    dplyr::select(sex, eda) %>% 
    head()
```

```{r}
enoet322socdem_tiempo %>% 
    dplyr::select(sex, eda) %>% 
    glimpse()
```
